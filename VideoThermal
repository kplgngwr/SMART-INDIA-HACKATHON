import cv2

def process_frame(frame):
    # Convert the frame to grayscale
    grayscale_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Adjust contrast and brightness
    alpha = 1.1  # Contrast control (1.0 means no change)
    beta = 27    # Brightness control

    enhanced_frame = cv2.convertScaleAbs(grayscale_frame, alpha=alpha, beta=beta)

    return enhanced_frame

def process_and_save_thermal_video(input_video_path, output_video_path):
    cap = cv2.VideoCapture(input_video_path)

    if not cap.isOpened():
        print("Error: Could not open the video.")
        return

    # Get the video properties
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = cap.get(cv2.CAP_PROP_FPS)

    # Define the codec and create VideoWriter object
    fourcc = cv2.VideoWriter_fourcc(*'XVID')  # You can change the codec as needed
    out = cv2.VideoWriter(output_video_path, fourcc, fps, (width, height), isColor=False)

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Process the frame
        enhanced_frame = process_frame(frame)

        # Display the enhanced black and white frame
        cv2.imshow("Enhanced Black and White Frame", enhanced_frame)

        # Write the processed frame to the output video
        out.write(enhanced_frame)

        # Press 'q' to exit the video processing
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release everything when done
    cap.release()
    out.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    # Replace with the path to your thermal video
    input_video_path = r"C:\Users\Nitish Maurya\Downloads\Thermal Camera HD Temperature Detection.mp4"
    output_video_path = r"C:\Users\Nitish Maurya\Downloads\yolov8-opencv-win11-main\yolov8-opencv-win11-main"

    process_and_save_thermal_video(input_video_path, output_video_path)
