#include <SPI.h>
#include <LoRa.h>
#include <HardwareSerial.h>
#include <DFRobot_SIM808.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

#define ss 5
#define rst 14
#define dio0 2
#define BAND 433E6

int counter = 0;
Adafruit_MPU6050 mpu;
HardwareSerial sim808Serial(2);  // Use Serial2 on ESP32 (you can choose a different one)
DFRobot_SIM808 sim808(&sim808Serial);

void setup() {
  Serial.begin(9600);
  startLoRa();
  Serial.println("LoRa Initialization OK!");
  //******** Initialize sim808 module *************
  sim808Serial.begin(9600, SERIAL_8N1, 16, 17);
  delay(1000);
  while (!sim808.init()) {
    delay(1000);
    Serial.print("Sim808 init error\r\n");
  }
  if (sim808.attachGPS())
    Serial.println("Open the GPS power success");
  else
    Serial.println("Open the GPS power failure");

  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  Serial.print("Accelerometer range set to: ");
  switch (mpu.getAccelerometerRange()) {
    case MPU6050_RANGE_2_G:
      Serial.println("+-2G");
      break;
    case MPU6050_RANGE_4_G:
      Serial.println("+-4G");
      break;
    case MPU6050_RANGE_8_G:
      Serial.println("+-8G");
      break;
    case MPU6050_RANGE_16_G:
      Serial.println("+-16G");
      break;
  }
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  Serial.print("Gyro range set to: ");
  switch (mpu.getGyroRange()) {
    case MPU6050_RANGE_250_DEG:
      Serial.println("+- 250 deg/s");
      break;
    case MPU6050_RANGE_500_DEG:
      Serial.println("+- 500 deg/s");
      break;
    case MPU6050_RANGE_1000_DEG:
      Serial.println("+- 1000 deg/s");
      break;
    case MPU6050_RANGE_2000_DEG:
      Serial.println("+- 2000 deg/s");
      break;
  }

  mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
  Serial.print("Filter bandwidth set to: ");
  switch (mpu.getFilterBandwidth()) {
    case MPU6050_BAND_260_HZ:
      Serial.println("260 Hz");
      break;
    case MPU6050_BAND_184_HZ:
      Serial.println("184 Hz");
      break;
    case MPU6050_BAND_94_HZ:
      Serial.println("94 Hz");
      break;
    case MPU6050_BAND_44_HZ:
      Serial.println("44 Hz");
      break;
    case MPU6050_BAND_21_HZ:
      Serial.println("21 Hz");
      break;
    case MPU6050_BAND_10_HZ:
      Serial.println("10 Hz");
      break;
    case MPU6050_BAND_5_HZ:
      Serial.println("5 Hz");
      break;
  }

  Serial.println("");
  delay(100);
}

void loop() {
  sendData();
  delay(1000);
}

void startLoRa() {
  LoRa.setPins(ss, rst, dio0);
  while (!LoRa.begin(BAND) && counter < 10) {
    Serial.print(".");
    counter++;
    delay(500);
  }
  if (counter == 10) {
    Serial.println("Starting LoRa failed!");
  } else {
    Serial.println("LoRa Initialization OK!");
  }
  delay(800);
}

void sendData() {
  String ID = "UP22XY0001";
  String packet2 = data();
  String message = String(ID) + "," + String(packet2);
  Serial.println(message);

  LoRa.beginPacket();
  LoRa.print(message);
  LoRa.endPacket();
}

String data() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  while (sim808.getGPS()) {
    if (sim808.getGPS()) {
      String data2 = String((sim808.GPSdata.lat), 6) + "," + String((sim808.GPSdata.lon), 6) + "," + String(sim808.GPSdata.speed_kph) + "," + String(g.gyro.x * (180.0 / PI)) + "," + String(g.gyro.y * (180.0 / PI)) + "," + String(temp.temperature);
      return data2;
      sim808.detachGPS();
    }
  }
}
